plot(f[2:250])
}
hulu <- function(i, j) {
f = colMeans(k[, seq(1 + 250 * (i-1), 250 * i)]) - colMeans(k[, seq(1+250 * (j-1), 250 * j) ])
plot(f[2:250])
}
hulu(1,2)
hulu(1,3)
hulu(1,5)
hulu(1,7)
hulu(1,9)
hulu(1,11)
hulu(1,13)
hulu(1,3)
hulu <- function(i, j) {
f = colMeans(k[, seq(1 + 250 * (i-1), 250 * i)]) - colMeans(k[, seq(1+250 * (j-1), 250 * j) ])
plot(f[1:250])
}
hulu(1,3)
hulu(1,5)
hulu(1,7)
hulu(1,9)
hulu(1,11)
hulu <- function(i, j) {
f = colMeans(k[, seq(1 + 250 * (i-1), 250 * i)]) - colMeans(k[, seq(1+250 * (j-1), 250 * j) ])
plot(f[2:250])
}
hulu(1,3)
hulu(1,5)
hulu(1,3)
hulu <- function(i, j) {
f = colMeans(k[, seq(1 + 250 * (i-1), 250 * i)]) - colMeans(k[, seq(1+250 * (j-1), 250 * j) ])
plot(-f[1:250])
}
hulu(1,3)
hulu <- function(i, j) {
f = colMeans(k[, seq(1 + 250 * (i-1), 250 * i)]) - colMeans(k[, seq(1+250 * (j-1), 250 * j) ])
plot(-f[2:250])
}
hulu(1,3)
hulu(1,5)
hulu(1,3)
hulu(1,7)
hulu(1,9)
hulu(1,11)
diff  <- function(i, j) {
colMeans(k[, seq(1 + 250 * (i-1), 250 * i)]) - colMeans(k[, seq(1+250 * (j-1), 250 * j) ])
}
hulu(1:3)
for (i in seq(3,11,2)) {
f = diff(1, i)
lines(-f[1:250])
}
hulu(1,3)
for (i in seq(3,11,2)) {
f = diff(1, i)
lines(-f[1:250])
}
hulu(1,3)
for (i in seq(3,11,2)) {
f = diff(1, i)
lines(-f[1:250], col=i)
}
hulu <- function(i, j) {
f = colMeans(k[, seq(1 + 250 * (i-1), 250 * i)]) - colMeans(k[, seq(1+250 * (j-1), 250 * j) ])
plot(-f[1:250], ylim=c(100, 2000))
}
hulu(1,3)
for (i in seq(3,11,2)) {
f = diff(1, i)
lines(-f[1:250], col=i)
}
hulu <- function(i, j) {
f = colMeans(k[, seq(1 + 250 * (i-1), 250 * i)]) - colMeans(k[, seq(1+250 * (j-1), 250 * j) ])
plot(-f[1:250], ylim=c(100, 2000))
}
#hulu(1,3)
for (i in seq(3,11,2)) {
f = diff(1, i)
lines(-f[1:250], col=i)
}
hulu <- function(i, j) {
f = colMeans(k[, seq(1 + 250 * (i-1), 250 * i)]) - colMeans(k[, seq(1+250 * (j-1), 250 * j) ])
plot(-f[1:250], ylim=c(100, 2000))
}
#hulu(1,3)
for (i in seq(3,11,2)) {
f = diff(1, i)
lines(-f[1:250], col=i)
}
hulu <- function(i, j) {
f = colMeans(k[, seq(1 + 250 * (i-1), 250 * i)]) - colMeans(k[, seq(1+250 * (j-1), 250 * j) ])
plot(-f[1:250], ylim=c(100, 2000))
}
hulu(1,3)
for (i in seq(3,11,2)) {
f = diff(1, i)
lines(-f[1:250], col=i)
}
hulu <- function(i, j) {
f = colMeans(k[, seq(1 + 250 * (i-1), 250 * i)]) - colMeans(k[, seq(1+250 * (j-1), 250 * j) ])
plot(-f[1:250], ylim=c(100, 2000), type="b")
}
hulu(1,3)
for (i in seq(3,11,2)) {
f = diff(1, i)
lines(-f[1:250], col=i)
}
hulu <- function(i, j) {
f = colMeans(k[, seq(1 + 250 * (i-1), 250 * i)]) - colMeans(k[, seq(1+250 * (j-1), 250 * j) ])
plot(-f[1:250], ylim=c(100, 2000), type="l")
}
hulu(1,3)
for (i in seq(3,11,2)) {
f = diff(1, i)
lines(-f[1:250], col=i)
}
diff  <- function(i, j, rows = 10) {
colMeans(k[1:rows, seq(1 + 250 * (i-1), 250 * i)]) - colMeans(k[1:rows, seq(1+250 * (j-1), 250 * j) ])
}
hulu <- function(i, j) {
f = diff(i,j)
plot(-f[1:250], ylim=c(100, 2000), type="l")
}
hulu(1,3)
for (i in seq(3,11,2)) {
f = diff(1, i)
lines(-f[1:250], col=i)
}
diff  <- function(i, j, rows = 10) {
colMeans(k[1:rows, seq(1 + 250 * (i-1), 250 * i)]) - colMeans(k[1:rows, seq(1+250 * (j-1), 250 * j) ])
}
hulu <- function(i, j) {
f = diff(i,j, 50)
plot(-f[1:250], ylim=c(100, 2000), type="l")
}
hulu(1,3)
for (i in seq(3,11,2)) {
f = diff(1, i, 50)
lines(-f[1:250], col=i)
}
k = read.csv( paste(input.dir, "input.csv", sep=""), stringsAsFactors = F, header = F, nrows = 1000)
diff  <- function(i, j, rows = 1000) {
colMeans(k[1:rows, seq(1 + 250 * (i-1), 250 * i)]) - colMeans(k[1:rows, seq(1+250 * (j-1), 250 * j) ])
}
hulu <- function(i, j) {
f = diff(i,j)
plot(-f[1:250], ylim=c(100, 2000), type="l")
}
hulu(1,3)
for (i in seq(3,11,2)) {
f = diff(1, i)
lines(-f[1:250], col=i)
}
hulu(1,3)
for (i in seq(3,11,2)) {
f = diff(1, i)
lines(-f[1:250], col=i*2)
}
hulu(1,3)
for (i in seq(3,11,2)) {
f = diff(1, i)
lines(-f[1:250], col=i+2)
}
hulu(1,3)
for (i in seq(3,11,2)) {
f = diff(1, i)
lines(-f[1:250], col=i+3)
}
lines(-f[1:250], col=i+1)
hulu(1,3)
for (i in seq(3,11,2)) {
f = diff(1, i)
lines(-f[1:250], col=(i-1)/2)
}
for (i in seq(1,11,2)) {
f = the.self(i)
plot(-f[1:250], col=(i-1)/2)
par(new=F)
}
the.self <- function(i, rows = 1000) {
colMeans(k[1:rows, seq(1 + 250 * (i-1), 250 * i)])
}
for (i in seq(1,11,2)) {
f = the.self(i)
plot(-f[1:250], col=(i-1)/2)
par(new=F)
}
for (i in seq(1,11,2)) {
f = the.self(i)
plot(-f[1:250], col=(i-1)/2)
par(new=T)
}
i = 1
f = the.self(i)
plot(-f[1:250], col=(i-1)/2, ylim(-))
f = the.self(i)
plot(-f[1:250], col=(i-1)/2
)
f = the.self(i)
plot(-f[1:250], col=(i-1)/2)
f = the.self(i)
plot(-f[1:250], col=(i)))
f = the.self(i)
plot(-f[1:250], col=(i))
f = the.self(i)
plot(-f[2:250], col=(i))
f = the.self(3)
plot(-f[2:250], col=(i))
f = the.self(5)
plot(-f[2:250], col=(i))
f = the.self(7)
plot(-f[2:250], col=(i))
f = the.self(9)
plot(-f[2:250], col=(i))
f = the.self(9)
plot(-f[2:250], col=(i))
f = the.self(7)
plot(-f[2:250], col=(i))
f = the.self(9)
plot(-f[2:250], col=(i))
f = the.self(11)
plot(-f[2:250], col=(i))
f = the.self(13)
plot(-f[2:250], col=(i))
f = the.self(11)
plot(-f[2:250], col=(i))
f = the.self(9)
plot(-f[2:250], col=(i))
for (i in seq(1,1,2)) {
f = the.self(i)
plot(-f[1:250], col=(i-1)/2, ylim(-1600, 0))
par(new=T)
}
for (i in seq(1,1,2)) {
f = the.self(i)
plot(-f[1:250], col=(i-1)/2, ylim=c(-1600, 0))
par(new=T)
}
for (i in seq(1,1,2)) {
f = the.self(i)
plot(-f[1:250], col=i, ylim=c(-1600, 0))
par(new=T)
}
for (i in seq(1,1,2)) {
f = the.self(i)
plot(-f[2:250], col=i, ylim=c(-1600, 0))
par(new=T)
}
for (i in seq(1,11,2)) {
f = the.self(i)
plot(-f[2:250], col=i, ylim=c(-1600, 0))
par(new=T)
}
for (i in seq(1,11,2)) {
f = the.self(i)
plot(-f[2:250], col=i, ylim=c(-1600, 0))
par(new=T)
}
for (i in seq(1,11,2)) {
f = the.self(i)
plot(-f[2:250], col=i, ylim=c(-1600, 0), type="l")
par(new=T)
}
for (i in seq(1,11,2)) {
f = the.self(i)
plot(-f[2:250], col=i, ylim=c(-1600, 0), type="l")
par(new=T)
}
for (i in seq(3,11,2)) {
f = the.self(i)
plot(-f[2:250], col=i, ylim=c(-1600, 0), type="l")
par(new=T)
}
ff(the.self)
fft(the.self)
fft(the.self(1))
plot(fft(the.self(!)))
plot(fft(the.self(1)))
fft(the.self(1))
plot(fft(the.self(!)))
plot(fft(the.self(1)))
plot(fft(the.self(1))[2:250])
plot(fft(the.self(3))[2:250])
plot(fft(the.self(5))[2:250])
plot(fft(the.self(7))[2:250])
plot(fft(the.self(9))[2:250])
the.self <- function(i, rows = 10) {
colMeans(k[1:rows, seq(1 + 250 * (i-1), 250 * i)])
}
fufu <- function(i) {
plot(fft(the.self(i))[2:250])
}
fufu(1)
fufu(2)
fufu(1)
i=1
plot(fft(the.self(i)))
plot(fft(the.self(i))[1:3])
plot(fft(the.self(i))[1:4])
plot(fft(the.self(i))[1:5])
plot(fft(the.self(i))[1:6])
plot(fft(the.self(i))[1:7])
plot(fft(the.self(i))[1:8])
plot(fft(the.self(i))[1:9])
for (i in seq(1,11,2)) {
f = the.self(i)
plot(-f[2:250], col=i, ylim=c(-1600, 0), type="l")
par(new=T)
}
for (i in seq(1,11,2)) {
f = the.self(i)
plot(-f[2:250], col=i, ylim=c(-200, 0), type="l")
par(new=T)
}
for (i in seq(1,11,2)) {
f = the.self(i)
plot(-f[2:250], col=i, ylim=c(-200, 0), type="l")
par(new=T)
}
for (i in seq(1,11,2)) {
f = the.self(i)
plot(-f[2:250], col=i, ylim=c(-2000, 0), type="l")
par(new=T)
}
for (i in seq(1,11,2)) {
f = the.self(i)
plot(-f[2:250], col=i, ylim=c(-5000, 0), type="l")
par(new=T)
}
input.dir
input.dir = "/Users/sohrab/Me/GeneAppsys/Phase 2/"
k = read.csv( paste(input.dir, "input.csv", sep=""), stringsAsFactors = F, header = F, nrows = 1000)
diff  <- function(i, j, rows = 1000) {
colMeans(k[1:rows, seq(1 + 250 * (i-1), 250 * i)]) - colMeans(k[1:rows, seq(1+250 * (j-1), 250 * j) ])
}
the.self <- function(i, rows = 10) {
colMeans(k[1:rows, seq(1 + 250 * (i-1), 250 * i)])
}
fufu <- function(i) {
plot(fft(the.self(i))[2:250])
}
hulu <- function(i, j) {
f = diff(i,j)
plot(-f[1:250], ylim=c(100, 2000), type="l")
}
hulu(1,3)
for (i in seq(3,11,2)) {
f = diff(1, i)
lines(-f[1:250], col=(i-1)/2)
}
for (i in seq(1,11,2)) {
f = the.self(i)
plot(-f[2:250], col=i, ylim=c(-5000, 0), type="l")
par(new=T)
}
print("Hello")
par(mfrow = c(2, 3))
the.self <- function(i, rows = 1) {
colMeans(k[1:rows, seq(1 + 250 * (i-1), 250 * i)])
}
fufu <- function(i) {
#plot(fft(the.self(i))[2:250])
plot((the.self(i))[2:250])
}
fufu(1)
fufu(2)
fufu(3)
fufu(5)
fufu(7)
fufu(9)
par(mfrow = c(4, 3))
lapply(seq(12), function(x) fufu(x))
par(mfrow = c(6, 2))
lapply(seq(12), function(x) fufu(x))
par(mfrow = c(3, 4))
lapply(seq(12), function(x) fufu(x))
the.self <- function(i, rows = 1000) {
colMeans(k[1:rows, seq(1 + 250 * (i-1), 250 * i)])
}
par(mfrow = c(3, 4))
lapply(seq(12), function(x) fufu(x))
?selectModel
library(limma)
?selectModel
?selectModel
library(limma)
?selectModel
source('~/Me/Apply/Canada Apply/Courses/Second Semester/Stat 540/Lab/stat540-2014-salehi-sohrab-hw/homework_1/style.R')
source('~/Me/Apply/Canada Apply/Courses/Second Semester/Stat 540/Lab/stat540-2014-salehi-sohrab-hw/homework_1/style.R')
super.sym <- trellis.par.get("superpose.symbol")
splom(~iris[1:4], groups = Species, data = iris,
panel = panel.superpose,
key = list(title = "Three Varieties of Iris",
columns = 3,
points = list(pch = super.sym$pch[1:3],
col = super.sym$col[1:3]),
text = list(c("Setosa", "Versicolor", "Virginica"))))
library(lattice)
super.sym <- trellis.par.get("superpose.symbol")
splom(~iris[1:4], groups = Species, data = iris,
panel = panel.superpose,
key = list(title = "Three Varieties of Iris",
columns = 3,
points = list(pch = super.sym$pch[1:3],
col = super.sym$col[1:3]),
text = list(c("Setosa", "Versicolor", "Virginica"))))
x = 1:10
y = c(2,2,2,2,5,6,1,1,1, 3)
splom(data.frame("x"=x, "y"=y))
x
y
library(limma)
citation("limma")
zeros(5)
zero(5)
t = matrix(1, nrow=1000, ncol=1000)
t
clear
pca(p)
data(cars)
ls
ls()
cars
p = cov(cars)
p
eigen(p)
?eigen
e = eigen(p)
p %*% e$vectors[,1]
e$values[1] * e$vectors[,1]
prcomp(cars)
library(edgeR)
# load the data
setwd("/Users/sohrab/Me/Apply/Canada Apply/Courses/Second Semester/Stat 540/Lab/stat540-2014-salehi-sohrab/Seminar 7")
dat <- read.table("data/bottomly_count_table.tsv", header = TRUE, row.names = 1)
des <- read.table("data/bottomly_phenodata.tsv", header = TRUE, row.names = 1)
str(dat)
# sanity check
des
all(rownames(des) == colnames(dat))
table(des$strain)
group <- factor(c(rep("1", 10), rep("2", 11)))
group
dge.glm <- DGEList(counts = dat, group = group)
str(dge.glm)
names(dge.glm)
dge.glm[["samples"]]
dge.glm$counts[1:10, 1:3]
length(dge.glm$counts[1,])
length(dge.glm$counts[,1])
# make the design matrix
design <- model.matrix(~group)
design
?estimateGLMCommonDisp
dge.glm.com.disp <- estimateGLMCommonDisp(dge.glm, design, verbose = TRUE)
# b. assuming
dge.glm.trend.disp <- estimateGLMTrendedDisp(dge.glm.com.disp, design)
dge.glm.tag.disp <- estimateGLMTagwiseDisp(dge.glm.trend.disp, design)
# plot the tagwise dispersion against log2-CPM (counts per million)
plotBCV(dge.glm.tag.disp)
fit <- glmFit(dge.glm.tag.disp, design)
colnames(coef(fit))
lrt <- glmLRT(fit, coef = 2)
# like top table?
topTags(lrt)
tt.glm <- topTags(lrt, n = Inf)
class(tt.glm)
nrow(tt.glm$table[tt.glm$table$FDR < 0.01, ])
interestingSamples <- rownames(tt.glm$table[tt.glm$table$FDR < 1e-50, ])
cpm(dge.glm.tag.disp)[interestingSamples, ]
summary(de.glm <- decideTestsDGE(lrt, p = 0.05, adjust = "BH"))
# plotting the tagwise log fold changes against log-cpm
tags.glm <- rownames(dge.glm.tag.disp)[as.logical(de.glm)]
plotSmear(lrt, de.tags = tags.glm)
abline(h = c(-2, 2), col = "blue")
samples
?
estimateDisp
head(dat)
dat1 <- dat[rowSums[dat] == 0,]
rowSums[dat]
dat1 <- dat[rowSums(dat) == 0,]
rownum(dat1)
rowsnum(dat1)
nrow(dat1)
nrow(dat)
dat1 <- dat[rowSums(dat) != 0,]
nrow(dat1)
head(dat1)
dat[2,]
head(group)
dat1 <- dat[rowSums(dat) != 0,]
dge.glm <- DGEList(counts = dat, group = group)
y <- estimateDisp(dge.glm, design)
dge.glm <- DGEList(counts = dat1, group = group)
y <- estimateDisp(dge.glm, design)
p = read.csv("https://raw.githubusercontent.com/alastair-JL/Stat540-NotchGroup/master/data/DesMatrix.csv?token=4334009__eyJzY29wZSI6IlJhd0Jsb2I6YWxhc3RhaXItSkwvU3RhdDU0MC1Ob3RjaEdyb3VwL21hc3Rlci9kYXRhL0Rlc01hdHJpeC5jc3YiLCJleHBpcmVzIjoxMzk2MzcyNjU5fQ%3D%3D--36ab4b2914a969a2921284160dd2f55b6eca7f40")
pwd
getwd()
p = read.csv("test.csv")
list.files()
p = read.csv("data/test.csv")
list.files("data")
list.files()
p = read.csv("test.csv")
p
p = read.csv("test.csv")
p
p = read.csv("test.csv", sep=";")
p
p[,-c(2)]
